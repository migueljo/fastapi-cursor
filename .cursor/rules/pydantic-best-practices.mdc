---
description: 
globs: **/*.{py}
alwaysApply: false
---
Best practices for using Pydantic v2 for data validation and serialization

- Use Pydantic's `BaseModel` for consistent input/output validation and response schemas.
- Implement custom validators using the `@validator` decorator for complex validation logic.
- Use `Field` to set additional properties like default values and aliases.
- Leverage Pydantic's built-in serialization and deserialization for performance optimization.
- Use `Config` to customize model behavior, such as enabling ORM mode for database integration.
